#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Outputs a fully inflected version of a lemmatized test set (provided on STDIN). 
If training data is provided, it will use a unigram model to select the form.

usage: cat LEMMA_FILE | python inflect
       [-t TRAINING_PREFIX] [-l LEMMA_SUFFIX] [-w WORD_SUFFIX]
"""

import argparse
import codecs
import sys
import os
from collections import defaultdict
from itertools import izip

from tree import DepTree

PARSER = argparse.ArgumentParser(description="Inflect a lemmatized corpus")
PARSER.add_argument("-t", type=str, default="data/train", help="training data prefix")
PARSER.add_argument("-l", type=str, default="lemma", help="lemma file suffix")
PARSER.add_argument("-w", type=str, default="form", help="word file suffix")
PARSER.add_argument("-d", type=str, default="tree", help="tree file suffix")
args = PARSER.parse_args()

# Python sucks at UTF-8
sys.stdout = codecs.getwriter('utf-8')(sys.stdout) 
sys.stdin = codecs.getreader('utf-8')(sys.stdin) 

# Enumerate the dependency tree nodes
if args.t:
    def combine(a, b): return '%s.%s' % (a, b)
    def utf8read(file): return codecs.open(file, 'r', 'utf-8')
    for words,treestr in izip(utf8read(combine(args.t, args.w)), utf8read(combine(args.t, args.d))):
        tree = DepTree(treestr)

        # linear traversal (left to right)
        for i,node in enumerate(tree, 1):
            print '%d -%s-> %d' % (node.parent_index(), node.label(), i),
        print

        # depth-first traversal
        def indent(node, level = 0):
            for i in range(level): print ' ',
            print node
            for child in node.children():
                indent(child, level + 2)
        indent(tree.root())
else:
    print "You won't see anything unless you add -t"
